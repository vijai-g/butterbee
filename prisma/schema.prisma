generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  PARTNER
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  phone         String?   @unique
  name          String?
  image         String?
  role          Role      @default(USER)
  password      String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  addresses     Address[]
  orders        Order[]
}

model Order {
  id        String   @id @default(cuid())
  publicId  String   @unique            // short, opaque code you expose to users
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  summary   String
  status    String   @default("NEW")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Department {
  FOOD
  CLOTHES
  SPORTS
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Int
  image       String
  category    String
  available   Boolean     @default(true)
  department  Department  @default(FOOD) // NEW
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  label     String? // "Home", "Office", etc (optional)
  door      String? // Door / Block
  tower     String? // Tower
  apartment String? // Apartment / Flat no.
  line1     String? // Optional extra line
  city      String? // optional now
  state     String? // optional now
  pincode   String? // optional now

  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SiteConfig {
  id            Int      @id @default(1) // single-row table (id always 1)
  apartmentsCsv String   @default("")    // "A, B, C"
  slotsJson     String   @default("[]")  // JSON array of slots
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

